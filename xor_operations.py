# -*- coding: utf-8 -*-
"""XOR Operations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FmJjMANIsqclTmTHPTG__5vjKBA9Jvon
"""

import sys

MOD = 998244353

def xor_basis_rank(arr):
    """Compute rank of vectors over GF(2) using XOR basis (each number up to 2^30)."""
    basis = [0] * 30  # since ai < 2^30
    rank = 0
    for x in arr:
        for b in reversed(range(30)):  # from high bit down
            if not (x >> b) & 1:
                continue
            if basis[b] == 0:
                basis[b] = x
                rank += 1
                break
            x ^= basis[b]
    return rank

def solve():
    input_data = sys.stdin.read().strip().split()
    n = int(input_data[0])
    a = list(map(int, input_data[1:]))

    d = xor_basis_rank(a)  # dimension of span
    exponent = (n - 1) * d
    ans = pow(2, exponent, MOD)
    print(ans)

if __name__ == "__main__":
    solve()