# -*- coding: utf-8 -*-
"""Untitled32.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qBViAfENgDcfDNAsMmCgHg6iejhs2Eve
"""

import sys
input = sys.stdin.readline

t = int(input())
for _ in range(t):
    n, q = map(int, input().split())
    a = list(map(int, input().split()))

    # map value -> position
    pos = [0]*(n+1)
    for idx, val in enumerate(a, 1):
        pos[val] = idx

    # precompute divisors
    divisors = [[] for _ in range(n+1)]
    for i in range(1, n+1):
        for j in range(i, n+1, i):
            divisors[j].append(i)

    # dp[i] = number of sequences ending at i
    dp = [0]*(n+1)
    for i in range(1, n+1):
        dp[i] = 1
        for d in divisors[a[i-1]]:
            j = pos[d]
            if j < i:
                dp[i] += dp[j]

    # prefix sum
    pref = [0]*(n+1)
    for i in range(1, n+1):
        pref[i] = pref[i-1] + dp[i]

    # answer queries
    res = []
    for _ in range(q):
        l, r = map(int, input().split())
        res.append(str(pref[r]-pref[l-1]))
    print(' '.join(res))