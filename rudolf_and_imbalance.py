# -*- coding: utf-8 -*-
"""Rudolf and Imbalance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qBViAfENgDcfDNAsMmCgHg6iejhs2Eve
"""

import sys
import math
input = sys.stdin.readline

t = int(input())
for _ in range(t):
    n, m, k = map(int, input().split())
    a = list(map(int, input().split()))
    d = list(map(int, input().split()))
    f = list(map(int, input().split()))

    fmin, fmax = min(f), max(f)

    # Step 1: current imbalance
    gaps = [a[i] - a[i-1] for i in range(1, n)]
    max_gap = max(gaps)

    answer = max_gap  # case: no insertion

    # Step 2: check each model against largest gaps
    for i in range(1, n):
        l, r = a[i-1], a[i]
        gap = r - l
        half_gap = (gap + 1) // 2

        target_left, target_right = l, r

        for di in d:
            # check if we can place in the gap with fmin or fmax
            cand1 = di + fmin
            cand2 = di + fmax

            # if candidate lies in [l, r]
            for cand in (cand1, cand2):
                if target_left < cand < target_right:
                    new_gap = max(half_gap, max(g for g in gaps if g != gap))
                    answer = min(answer, new_gap)

    print(answer)