# -*- coding: utf-8 -*-
"""zig zag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qBViAfENgDcfDNAsMmCgHg6iejhs2Eve
"""

MOD = 998244353
MAXN = 300000 + 10

# Precompute factorials and inverse factorials
fact = [1] * MAXN
invfact = [1] * MAXN

for i in range(1, MAXN):
    fact[i] = fact[i-1] * i % MOD

# Fermat inverse
invfact[MAXN-1] = pow(fact[MAXN-1], MOD-2, MOD)
for i in range(MAXN-2, -1, -1):
    invfact[i] = invfact[i+1] * (i+1) % MOD

def comb(n, k):
    if k < 0 or k > n:
        return 0
    return fact[n] * invfact[k] % MOD * invfact[n-k] % MOD

import sys
input = sys.stdin.readline

t = int(input())
for _ in range(t):
    n = int(input())
    # Number of zig-zag sequences is 2^(number of splits - 1)
    # Using combinatorial sum: sum C(n-1, k-1) for k=2..n multiplied by 2
    total = 0
    for k in range(2, n+1):
        total += comb(n-1, k-1)
        if total >= MOD:
            total -= MOD
    total = total * 2 % MOD
    print(total)