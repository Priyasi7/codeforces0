# -*- coding: utf-8 -*-
"""Untitled32.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qBViAfENgDcfDNAsMmCgHg6iejhs2Eve
"""

def solve():
    import sys
    input = sys.stdin.read
    data = input().split()

    t = int(data[0])
    idx = 1
    results = []

    for _ in range(t):
        n = int(data[idx]); idx += 1
        s = data[idx]; idx += 1

        # prefix sums of zeros and ones
        prefix0 = [0] * (n + 1)
        prefix1 = [0] * (n + 1)
        for i in range(1, n + 1):
            prefix0[i] = prefix0[i - 1] + (1 if s[i - 1] == '0' else 0)
            prefix1[i] = prefix1[i - 1] + (1 if s[i - 1] == '1' else 0)

        best_i = -1
        best_dist = n + 5

        for i in range(0, n + 1):
            left_size = i
            right_size = n - i

            left_zeros = prefix0[i]
            right_ones = prefix1[n] - prefix1[i]

            if left_zeros >= (left_size + 1) // 2 and right_ones >= (right_size + 1) // 2:
                dist = abs(n // 2 - i)
                # choose larger index in case of tie
                if dist < best_dist or (dist == best_dist and i > best_i):
                    best_i = i
                    best_dist = dist

        results.append(str(best_i))

    print("\n".join(results))