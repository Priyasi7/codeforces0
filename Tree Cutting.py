# -*- coding: utf-8 -*-
"""Untitled32.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qBViAfENgDcfDNAsMmCgHg6iejhs2Eve
"""

import sys
sys.setrecursionlimit(10**6)
input = sys.stdin.read
data = input().split()
idx = 0

t = int(data[idx])
idx += 1
results = []

for _ in range(t):
    n = int(data[idx])
    k = int(data[idx + 1])
    idx += 2

    adj = [[] for _ in range(n + 1)]
    for _ in range(n - 1):
        u = int(data[idx])
        v = int(data[idx + 1])
        idx += 2
        adj[u].append(v)
        adj[v].append(u)

    # Binary search
    low, high = 1, n
    ans = 1

    def can_cut(x):
        cuts = 0
        def dfs(u, parent):
            nonlocal cuts
            size = 1
            for v in adj[u]:
                if v == parent:
                    continue
                child_size = dfs(v, u)
                size += child_size
            if size >= x:
                cuts += 1
                return 0
            return size
        dfs(1, -1)
        return cuts >= k + 1

    while low <= high:
        mid = (low + high) // 2
        if can_cut(mid):
            ans = mid
            low = mid + 1
        else:
            high = mid - 1

    results.append(ans)

print("\n".join(map(str, results)))