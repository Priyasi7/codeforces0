# -*- coding: utf-8 -*-
"""Untitled32.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qBViAfENgDcfDNAsMmCgHg6iejhs2Eve
"""

import sys
import heapq
from collections import deque

def cook_and_porridge():
    input = sys.stdin.read
    data = input().split()

    t = int(data[0])
    idx = 1
    results = []

    for _ in range(t):
        n = int(data[idx]); idx += 1
        D = int(data[idx]); idx += 1

        k = []
        s = []
        for _ in range(n):
            k.append(int(data[idx])); idx += 1
            s.append(int(data[idx])); idx += 1

        first_served = [-1] * n
        queue = deque(range(n))  # initial queue
        events = []  # min-heap of (return_time, s[i], index)

        current_time = 1
        served_count = 0

        while current_time <= D and served_count < n:
            # Process returning children
            while events and events[0][0] == current_time:
                _, si, idx_child = heapq.heappop(events)
                # Insert behind last child with priority >= ki
                inserted = False
                for pos in range(len(queue)-1, -1, -1):
                    if k[queue[pos]] >= k[idx_child]:
                        queue.insert(pos+1, idx_child)
                        inserted = True
                        break
                if not inserted:
                    queue.appendleft(idx_child)

            if queue:
                child = queue.popleft()
                if first_served[child] == -1:
                    first_served[child] = current_time
                    served_count += 1
                return_time = current_time + s[child]
                if return_time <= D:
                    heapq.heappush(events, (return_time, s[child], child))

            current_time += 1

        # Check if all served at least once
        if served_count < n:
            results.append("-1")
        else:
            results.append(str(max(first_served)))

    print("\n".join(results))